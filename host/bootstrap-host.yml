---
- name: Bootstrap Debian server
  hosts: lilyhost01
  become: true
  vars:
    docker_data_mount: /srv/docker-data
    docker_data_device: /dev/nvme0n1
    tailscale_authkey: ""  # Provide via --extra-vars or Vault
    ansibleadmin_ssh_pubkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFSsEngu8whaTye0S5zRhHbuNbJQv4DY7I8qxU5cyes2"
    ansibleadmin_uid: 1100
    ansibleadmin_gid: 1100

  roles:
    - geerlingguy.docker
  
  tasks:

    - name: Create filesystem on data disk
      community.general.filesystem:
        fstype: ext4
        dev: "{{ docker_data_device }}"
        force: false

    - name: Create mount point
      file:
        path: "{{ docker_data_mount }}"
        state: directory
        mode: '0755'

    - name: Mount the disk
      ansible.posix.mount:
        path: "{{ docker_data_mount }}"
        src: "{{ docker_data_device }}"
        fstype: ext4
        opts: defaults
        state: mounted

    - name: Ensure fstab entry is present
      ansible.posix.mount:
        path: "{{ docker_data_mount }}"
        src: "{{ docker_data_device }}"
        fstype: ext4
        opts: defaults
        state: present


    - name: Set system timezone to UTC
      timezone:
        name: Etc/UTC

    - name: Enable NTP sync
      systemd:
        name: systemd-timesyncd
        enabled: yes
        state: started

    - name: Update & upgrade system
      apt:
        upgrade: dist
        update_cache: yes
        autoremove: yes
        autoclean: yes

    - name: Ensure Tailscale dependencies are present
      apt:
        name:
          - iptables
          - iproute2
          - ca-certificates
          - curl
          - lsb-release
        state: present
        update_cache: yes

    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present
        update_cache: yes        

    - name: Reboot if needed
      reboot:
        pre_reboot_delay: 0
        reboot_timeout: 600
        post_reboot_delay: 30
        test_command: uptime

    - name: Install Tailscale
      shell: curl -fsSL https://tailscale.com/install.sh | sh
      args:
        creates: /usr/sbin/tailscaled
  
    - name: Reload systemd (ensure tailscaled is registered)
      command: systemctl daemon-reexec
      notify: Start Tailscaled

    - name: Enable Tailscale
      systemd:
        name: tailscaled
        enabled: yes
        state: started

    - name: Join tailnet if auth key provided
      shell: tailscale up --authkey {{ tailscale_authkey }} --ssh
      when: tailscale_authkey != ""

    - name: Enable UFW & allow SSH`
      ufw:
        rule: allow
        name: OpenSSH

    - name: Enable default UFW deny policy
      ufw:
        state: enabled
        policy: deny

    - name: Ensure unattended-upgrades and dependencies are installed
      apt:
        name:
          - unattended-upgrades
          - apt-listchanges
        state: present
        update_cache: yes

    - name: Configure unattended upgrades
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";
              "${distro_id}:${distro_codename}-updates";
              "${distro_id}:${distro_codename}-proposed";
              "${distro_id}:${distro_codename}-backports";
          };

          Unattended-Upgrade::Automatic-Reboot "true";
          Unattended-Upgrade::Automatic-Reboot-WithUsers "true";
          Unattended-Upgrade::Automatic-Reboot-Time "03:00";

          Unattended-Upgrade::OnlyOnWeekdays "7";

          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Remove-New-Unused-Dependencies "true";

          Unattended-Upgrade::Verbose "true";
          Unattended-Upgrade::SyslogEnable "true";
        owner: root
        group: root
        mode: '0644'

    - name: Enable unattended-upgrades service
      systemd:
        name: unattended-upgrades
        enabled: yes
        state: started
    
    - name: Create ansibleadmin group
      group:
        name: ansibleadmin
        gid: "{{ ansibleadmin_gid }}"
        state: present

    - name: Create ansibleadmin user
      user:
        name: ansibleadmin
        uid: "{{ ansibleadmin_uid }}"
        group: ansibleadmin
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Add ansibleadmin to docker group
      user:
        name: ansibleadmin
        groups: docker
        append: yes
    
    - name: Add rippee to docker group
      user:
        name: rippee
        groups: docker
        append: yes

    - name: Add SSH public key for ansibleadmin
      authorized_key:
        user: ansibleadmin
        key: "{{ ansibleadmin_ssh_pubkey }}"
        state: present
        exclusive: false
        manage_dir: true

    - name: Allow ansibleadmin passwordless sudo
      copy:
        dest: /etc/sudoers.d/99-ansibleadmin
        content: "ansibleadmin ALL=(ALL) NOPASSWD:ALL\n"
        owner: root
        group: root
        mode: '0440'
  
  handlers:
    - name: Start Tailscaled
      systemd:
        name: tailscaled
        enabled: true
        state: started

